#!/usr/bin/env python3
"""F1 Data Analytics - Assignment 2: Visualizations, Plotly, Excel Export"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import os
import warnings
from connection import F1DatabaseConnector
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è matplotlib
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.dpi'] = 100
plt.rcParams['savefig.dpi'] = 300

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
os.makedirs('charts', exist_ok=True)
os.makedirs('exports', exist_ok=True)

class F1Analytics:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        self.connector = F1DatabaseConnector()
        if not self.connector.connect():
            raise RuntimeError("Failed to connect to database")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö F1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def execute_query(self, query, query_name="Query"):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç DataFrame"""
        try:
            cursor = self.connector.connection.cursor()
            cursor.execute(query)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            columns = [desc[0] for desc in cursor.description] if cursor.description else []
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = cursor.fetchall()
            cursor.close()
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data, columns=columns)
            print(f"üìä {query_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {query_name}: {e}")
            return pd.DataFrame()
    
    def create_pie_chart(self):
        """1. Pie chart - –¢–æ–ø-10 –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –ø–æ–¥–∏—É–º–∞–º (Q9 –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
        query = """
        SELECT d.forename || ' ' || d.surname AS driver, COUNT(*) AS podiums
        FROM results r
        JOIN drivers d ON d.driverid = r.driverid
        WHERE r.position IN (1,2,3)
        GROUP BY d.driverid, driver
        ORDER BY podiums DESC
        LIMIT 10;
        """
        
        df = self.execute_query(query, "Pie Chart - Top 10 Podiums")
        if df.empty:
            return
        
        plt.figure(figsize=(12, 8))
        colors = plt.cm.Set3(np.linspace(0, 1, len(df)))
        
        wedges, texts, autotexts = plt.pie(df['podiums'], labels=df['driver'], 
                                          autopct='%1.1f%%', colors=colors, 
                                          startangle=90, textprops={'fontsize': 10})
        
        # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        plt.title('Distribution of Podium Finishes - Top 10 F1 Drivers', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.axis('equal')
        
        plt.tight_layout()
        plt.savefig('charts/01_podiums_pie_chart.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        total_podiums = df['podiums'].sum()
        print(f"üìà –°–æ–∑–¥–∞–Ω pie chart: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∏—É–º–æ–≤ —Å—Ä–µ–¥–∏ —Ç–æ–ø-10 –ø–∏–ª–æ—Ç–æ–≤ ({len(df)} –ø–∏–ª–æ—Ç–æ–≤)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {total_podiums} –ø–æ–¥–∏—É–º–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É –ª—É—á—à–∏–º–∏ –ø–∏–ª–æ—Ç–∞–º–∏")
    
    def create_bar_chart(self):
        """2. Bar chart - –¢–æ–ø-10 –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –æ—á–∫–∞–º (Q1)"""
        query = """
        SELECT d.driverid, d.forename || ' ' || d.surname AS driver, SUM(r.points) AS total_points
        FROM results r
        JOIN drivers d ON d.driverid = r.driverid
        GROUP BY d.driverid, driver
        ORDER BY total_points DESC
        LIMIT 10;
        """
        
        df = self.execute_query(query, "Bar Chart - Top 10 Points")
        if df.empty:
            return
        
        plt.figure(figsize=(14, 8))
        bars = plt.bar(range(len(df)), df['total_points'], 
                      color=plt.cm.viridis(np.linspace(0, 1, len(df))))
        
        plt.title('Career Points - Top 10 F1 Drivers', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Driver', fontsize=12)
        plt.ylabel('Total Career Points', fontsize=12)
        plt.xticks(range(len(df)), df['driver'], rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, bar in enumerate(bars):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 10,
                    f'{int(height)}', ha='center', va='bottom', fontsize=10)
        
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        plt.savefig('charts/02_points_bar_chart.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        max_points = df['total_points'].max()
        print(f"üìà –°–æ–∑–¥–∞–Ω bar chart: –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –æ—á–∫–∏ —Ç–æ–ø-10 –ø–∏–ª–æ—Ç–æ–≤ ({len(df)} –ø–∏–ª–æ—Ç–æ–≤)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ª–∏–¥–µ—Ä –Ω–∞–±—Ä–∞–ª {max_points} –æ—á–∫–æ–≤ –∑–∞ –∫–∞—Ä—å–µ—Ä—É")
    
    def create_horizontal_bar_chart(self):
        """3. Horizontal bar chart - –°—Ä–µ–¥–Ω–∏–µ —Ñ–∏–Ω–∏—à–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ (Q2)"""
        query = """
        SELECT c.constructorid, c.name AS constructor, ROUND(AVG(r.position)::numeric, 2) AS avg_finish
        FROM results r
        JOIN races ra ON ra.raceid = r.raceid
        JOIN constructors c ON c.constructorid = r.constructorid
        WHERE ra.year >= 2010 AND r.position IS NOT NULL
        GROUP BY c.constructorid, constructor
        ORDER BY avg_finish ASC
        LIMIT 15;
        """
        
        df = self.execute_query(query, "Horizontal Bar - Constructor Performance")
        if df.empty:
            return
        
        plt.figure(figsize=(12, 10))
        bars = plt.barh(range(len(df)), df['avg_finish'], 
                       color=plt.cm.RdYlGn_r(np.linspace(0, 1, len(df))))
        
        plt.title('Average Finishing Position by Constructor (2010+)', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Average Finishing Position (lower is better)', fontsize=12)
        plt.ylabel('Constructor', fontsize=12)
        plt.yticks(range(len(df)), df['constructor'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for i, bar in enumerate(bars):
            width = bar.get_width()
            plt.text(width + 0.1, bar.get_y() + bar.get_height()/2.,
                    f'{width}', ha='left', va='center', fontsize=10)
        
        plt.grid(axis='x', alpha=0.3)
        plt.tight_layout()
        plt.savefig('charts/03_constructors_horizontal_bar.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        best_avg = df['avg_finish'].min()
        print(f"üìà –°–æ–∑–¥–∞–Ω horizontal bar chart: —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏–Ω–∏—à–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ ({len(df)} –∫–æ–º–∞–Ω–¥)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ª—É—á—à–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ñ–∏–Ω–∏—à–∏—Ä—É–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ {best_avg} –ø–æ–∑–∏—Ü–∏–∏")
    
    def create_line_chart(self):
        """4. Line chart - DNFs –ø–æ –≥–æ–¥–∞–º (Q5)"""
        query = """
        SELECT ra.year, COUNT(*) AS dnfs
        FROM results r
        JOIN races ra ON ra.raceid = r.raceid
        JOIN status s ON s.statusid = r.statusid
        WHERE s.status <> 'Finished'
        GROUP BY ra.year
        ORDER BY ra.year;
        """
        
        df = self.execute_query(query, "Line Chart - DNFs by Year")
        if df.empty:
            return
        
        plt.figure(figsize=(14, 8))
        plt.plot(df['year'], df['dnfs'], marker='o', linewidth=3, markersize=6, 
                color='darkred', markerfacecolor='red')
        
        plt.title('DNFs (Did Not Finish) Trend Over Years in Formula 1', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Year', fontsize=12)
        plt.ylabel('Number of DNFs', fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        avg_dnfs = df['dnfs'].mean()
        plt.axhline(y=avg_dnfs, color='blue', linestyle='--', alpha=0.7, 
                   label=f'Average: {avg_dnfs:.0f} DNFs')
        
        plt.grid(True, alpha=0.3)
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig('charts/04_dnfs_line_chart.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        max_dnfs = df['dnfs'].max()
        year_max = df.loc[df['dnfs'].idxmax(), 'year']
        print(f"üìà –°–æ–∑–¥–∞–Ω line chart: –¥–∏–Ω–∞–º–∏–∫–∞ DNFs –ø–æ –≥–æ–¥–∞–º ({len(df)} –ª–µ—Ç)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø–∏–∫ —Å—Ö–æ–¥–æ–≤ –±—ã–ª –≤ {year_max} –≥–æ–¥—É ({max_dnfs} DNFs)")
    
    def create_histogram(self):
        """5. Histogram - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤ (Q6 –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
        query = """
        SELECT ps.milliseconds
        FROM pit_stops ps
        JOIN races ra ON ra.raceid = ps.raceid
        WHERE ra.year >= 2010 AND ps.milliseconds < 10000 AND ps.milliseconds > 1000;
        """
        
        df = self.execute_query(query, "Histogram - Pit Stop Times")
        if df.empty:
            return
        
        plt.figure(figsize=(12, 8))
        n, bins, patches = plt.hist(df['milliseconds'], bins=50, alpha=0.7, 
                                   color='skyblue', edgecolor='black')
        
        plt.title('Distribution of Pit Stop Times in Formula 1 (2010+)', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Pit Stop Duration (milliseconds)', fontsize=12)
        plt.ylabel('Frequency', fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mean_time = df['milliseconds'].mean()
        median_time = df['milliseconds'].median()
        plt.axvline(mean_time, color='red', linestyle='--', linewidth=2, 
                   label=f'Average: {mean_time:.0f}ms')
        plt.axvline(median_time, color='green', linestyle='--', linewidth=2,
                   label=f'Median: {median_time:.0f}ms')
        
        plt.legend()
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        plt.savefig('charts/05_pitstops_histogram.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìà –°–æ–∑–¥–∞–Ω histogram: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤ ({len(df)} –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {mean_time:.0f}ms, –º–µ–¥–∏–∞–Ω–∞ {median_time:.0f}ms")
    
    def create_scatter_plot(self):
        """6. Scatter plot - –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è vs –ì–æ–Ω–∫–∞ (Q4 –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
        query = """
        SELECT d.forename || ' ' || d.surname AS driver,
               q.position as quali_pos,
               r.position as race_pos,
               (r.position - q.position) AS position_delta
        FROM qualifying q
        JOIN results r ON r.raceid = q.raceid AND r.driverid = q.driverid
        JOIN drivers d ON d.driverid = q.driverid
        JOIN races ra ON ra.raceid = q.raceid
        WHERE q.position IS NOT NULL AND r.position IS NOT NULL
          AND ra.year >= 2020 AND q.position <= 20 AND r.position <= 20
        LIMIT 500;
        """
        
        df = self.execute_query(query, "Scatter Plot - Qualifying vs Race Performance")
        if df.empty:
            return
        
        plt.figure(figsize=(12, 10))
        scatter = plt.scatter(df['quali_pos'], df['race_pos'], 
                            alpha=0.6, s=50, c=df['position_delta'], 
                            cmap='RdYlBu_r', edgecolors='black', linewidth=0.5)
        
        plt.title('Qualifying vs Race Position in Formula 1 (2020+)', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Qualifying Position', fontsize=12)
        plt.ylabel('Race Finishing Position', fontsize=12)
        
        # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        plt.plot([1, 20], [1, 20], 'k--', alpha=0.5, linewidth=2,
                label='Perfect correlation (no position change)')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
        cbar = plt.colorbar(scatter)
        cbar.set_label('Position Change (+ = lost positions, - = gained)', fontsize=10)
        
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.xlim(0, 21)
        plt.ylim(0, 21)
        plt.tight_layout()
        plt.savefig('charts/06_qualifying_race_scatter.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        avg_delta = df['position_delta'].mean()
        print(f"üìà –°–æ–∑–¥–∞–Ω scatter plot: –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è vs –≥–æ–Ω–∫–∞ ({len(df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–∏–ª–æ—Ç—ã –∏–∑–º–µ–Ω—è—é—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ {avg_delta:.2f} –º–µ—Å—Ç–∞")
    
    def create_plotly_time_slider(self):
        """7. Plotly —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–ª–∑—É–Ω–∫–æ–º - DNFs –ø–æ –≥–æ–¥–∞–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        query = """
        SELECT ra.year, COUNT(*) AS dnfs
        FROM results r
        JOIN races ra ON ra.raceid = r.raceid
        JOIN status s ON s.statusid = r.statusid
        WHERE s.status <> 'Finished' AND ra.year >= 1990
        GROUP BY ra.year
        ORDER BY ra.year;
        """
        
        df = self.execute_query(query, "Plotly Animation - DNFs Evolution")
        if df.empty:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        fig = px.line(df, x='year', y='dnfs', 
                     animation_frame='year',
                     title='üèéÔ∏è Evolution of DNFs (Did Not Finish) Over Time - Interactive Timeline',
                     labels={'year': 'Season Year', 'dnfs': 'Number of DNFs'},
                     range_y=[0, df['dnfs'].max() * 1.1])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª—è
        fig.update_layout(
            title_font_size=18,
            xaxis_title_font_size=14,
            yaxis_title_font_size=14,
            width=1200,
            height=700,
            showlegend=False
        )
        
        # –£–ª—É—á—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 100
        fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 50
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        fig.show()
        
        print(f"üé¨ –°–æ–∑–¥–∞–Ω Plotly –≥—Ä–∞—Ñ–∏–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–ª–∑—É–Ω–∫–æ–º: —ç–≤–æ–ª—é—Ü–∏—è DNFs ({len(df)} –ª–µ—Ç)")
        print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ö–æ–¥–æ–≤")
        print(f"   üì± –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è!")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ - –ø–∏—Ç-—Å—Ç–æ–ø—ã –ø–æ –≥–æ–¥–∞–º  
        query2 = """
        SELECT ra.year, 
               ROUND(AVG(ps.milliseconds)::numeric, 0) as avg_pitstop_ms,
               COUNT(ps.stop) as total_pitstops
        FROM pit_stops ps
        JOIN races ra ON ra.raceid = ps.raceid
        WHERE ra.year >= 2000
        GROUP BY ra.year
        ORDER BY ra.year;
        """
        
        df2 = self.execute_query(query2, "Plotly Animation - Pitstop Evolution")
        if not df2.empty:
            fig2 = px.scatter(df2, x='year', y='avg_pitstop_ms',
                            size='total_pitstops',
                            animation_frame='year',
                            title='‚è±Ô∏è Pit Stop Times Evolution - Interactive Timeline',
                            labels={'year': 'Season Year', 
                                   'avg_pitstop_ms': 'Average Pit Stop Time (ms)',
                                   'total_pitstops': 'Total Pit Stops'})
            
            fig2.update_layout(
                title_font_size=18,
                xaxis_title_font_size=14,
                yaxis_title_font_size=14,
                width=1200,
                height=700
            )
            
            # –£–ª—É—á—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            fig2.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 150
            fig2.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 75
            
            fig2.show()
            
            print(f"üé¨ –°–æ–∑–¥–∞–Ω –≤—Ç–æ—Ä–æ–π Plotly –≥—Ä–∞—Ñ–∏–∫: —ç–≤–æ–ª—é—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤ ({len(df2)} –ª–µ—Ç)")
            print(f"   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∫–∞–∫ –º–µ–Ω—è–ª–æ—Å—å –≤—Ä–µ–º—è –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –≥–æ–¥–∞–º")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if self.connector:
            self.connector.disconnect()

def main():
    print("üèéÔ∏è  F1 DATA ANALYTICS - ASSIGNMENT 2")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
        analytics = F1Analytics()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ 6 –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        analytics.create_pie_chart()
        print()
        analytics.create_bar_chart()
        print()
        analytics.create_horizontal_bar_chart()
        print()
        analytics.create_line_chart()
        print()
        analytics.create_histogram()
        print()
        analytics.create_scatter_plot()
        print()
        
        # Plotly –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–ª–∑—É–Ω–∫–æ–º
        print("\nüé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö Plotly –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        analytics.create_plotly_time_slider()
        
        chart_files = [f for f in os.listdir('charts') if f.endswith('.png')]
        print(f"\n‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É 'charts/': {len(chart_files)} —Ñ–∞–π–ª–æ–≤")
        
        for chart in sorted(chart_files):
            print(f"   üìä {chart}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        if 'analytics' in locals():
            analytics.close()

if __name__ == "__main__":
    main()